from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

import os

# Specify the path to your desired directory
path_to_directory = '/content/drive/MyDrive/core project1'

# Change the working directory to the specified path
os.chdir(path_to_directory)

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
import matplotlib.pyplot as plt

train_data_dir = '/content/drive/MyDrive/core project1'
validation_data_dir = '/content/drive/MyDrive/core project1'

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

validation_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

validation_generator = validation_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

base_model = MobileNetV2(input_shape=(224, 224, 3),
                         include_top=False,
                         weights='imagenet')

for layer in base_model.layers:
    layer.trainable = False

x = layers.GlobalAveragePooling2D()(base_model.output)
x = layers.Dense(1024, activation='relu')(x)
output = layers.Dense(1, activation='sigmoid')(x)

model = keras.models.Model(inputs=base_model.input, outputs=output)

model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.01),  # Increase the learning rate
              loss='binary_crossentropy',
              metrics=['accuracy'])

history = model.fit(
    train_generator,
    epochs=20,
    validation_data=validation_generator,
)
# Assuming 'history' contains accuracy values from training
train_accuracy = history.history['accuracy']
validation_accuracy = history.history['val_accuracy']

# Calculate the average accuracy
average_train_accuracy = sum(train_accuracy) / len(train_accuracy)
average_validation_accuracy = sum(validation_accuracy) / len(validation_accuracy)

print("Average Training Accuracy:", average_train_accuracy)
print("Average Validation Accuracy:", average_validation_accuracy)

Epoch 1/20
 6/19 [========>.....................] - ETA: 1:40 - loss: 9.8634 - accuracy: 0.5922 /usr/local/lib/python3.10/dist-packages/PIL/Image.py:996: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  warnings.warn(
19/19 [==============================] - 184s 10s/step - loss: 4.4905 - accuracy: 0.6454 - val_loss: 0.4752 - val_accuracy: 0.8118
Epoch 2/20
19/19 [==============================] - 77s 4s/step - loss: 0.6300 - accuracy: 0.7462 - val_loss: 0.3778 - val_accuracy: 0.8504
Epoch 3/20
19/19 [==============================] - 64s 3s/step - loss: 0.4679 - accuracy: 0.8000 - val_loss: 0.2781 - val_accuracy: 0.8874
Epoch 4/20
19/19 [==============================] - 75s 4s/step - loss: 0.3326 - accuracy: 0.8555 - val_loss: 0.2323 - val_accuracy: 0.9025
Epoch 5/20
19/19 [==============================] - 61s 3s/step - loss: 0.2495 - accuracy: 0.8958 - val_loss: 0.2035 - val_accuracy: 0.9210
Epoch 6/20
19/19 [==============================] - 78s 4s/step - loss: 0.3478 - accuracy: 0.8487 - val_loss: 0.5376 - val_accuracy: 0.7681
Epoch 7/20
19/19 [==============================] - 63s 3s/step - loss: 0.3411 - accuracy: 0.8538 - val_loss: 0.1930 - val_accuracy: 0.9277
Epoch 8/20
19/19 [==============================] - 62s 3s/step - loss: 0.2422 - accuracy: 0.8975 - val_loss: 0.1676 - val_accuracy: 0.9328
Epoch 9/20
19/19 [==============================] - 74s 4s/step - loss: 0.1729 - accuracy: 0.9277 - val_loss: 0.1406 - val_accuracy: 0.9462
Epoch 10/20
19/19 [==============================] - 69s 4s/step - loss: 0.1985 - accuracy: 0.9277 - val_loss: 0.1145 - val_accuracy: 0.9580
Epoch 11/20
19/19 [==============================] - 63s 3s/step - loss: 0.1631 - accuracy: 0.9378 - val_loss: 0.1129 - val_accuracy: 0.9513
Epoch 12/20
19/19 [==============================] - 76s 4s/step - loss: 0.1794 - accuracy: 0.9311 - val_loss: 0.2557 - val_accuracy: 0.8908
Epoch 13/20
19/19 [==============================] - 61s 3s/step - loss: 0.1793 - accuracy: 0.9176 - val_loss: 0.0814 - val_accuracy: 0.9748
Epoch 14/20
19/19 [==============================] - 67s 4s/step - loss: 0.1192 - accuracy: 0.9479 - val_loss: 0.1342 - val_accuracy: 0.9445
Epoch 15/20
19/19 [==============================] - 61s 3s/step - loss: 0.1269 - accuracy: 0.9597 - val_loss: 0.0948 - val_accuracy: 0.9697
Epoch 16/20
19/19 [==============================] - 76s 4s/step - loss: 0.1214 - accuracy: 0.9546 - val_loss: 0.0740 - val_accuracy: 0.9697
Epoch 17/20
19/19 [==============================] - 61s 3s/step - loss: 0.1295 - accuracy: 0.9630 - val_loss: 0.0680 - val_accuracy: 0.9714
Epoch 18/20
19/19 [==============================] - 76s 4s/step - loss: 0.1153 - accuracy: 0.9563 - val_loss: 0.0541 - val_accuracy: 0.9748
Epoch 19/20
19/19 [==============================] - 81s 4s/step - loss: 0.1420 - accuracy: 0.9462 - val_loss: 0.1012 - val_accuracy: 0.9546
Epoch 20/20
19/19 [==============================] - 62s 3s/step - loss: 0.1124 - accuracy: 0.9647 - val_loss: 0.0642 - val_accuracy: 0.9765
Average Training Accuracy: 0.8938655525445938
Average Validation Accuracy: 0.9242016851902009
