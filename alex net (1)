{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28805,"status":"ok","timestamp":1703085814191,"user":{"displayName":"ABIRAMI G","userId":"00751295287036755883"},"user_tz":-330},"id":"FVKD9k5L_9UP","outputId":"91962643-ef2e-4af4-e80a-765b155ff4e9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","\n","# Mount Google Drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4266,"status":"ok","timestamp":1703085828697,"user":{"displayName":"ABIRAMI G","userId":"00751295287036755883"},"user_tz":-330},"id":"2ZnKXIpoAiLa","outputId":"33254c4a-ad23-4ff8-b48c-f70348891ed1"},"outputs":[{"output_type":"stream","name":"stdout","text":["No GPU available. Switch to a GPU runtime in Google Colab.\n"]}],"source":["import os\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n","from tensorflow.keras.optimizers import Adam\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","# Check if GPU is available and set it as the runtime\n","if tf.test.gpu_device_name():\n","    print('Default GPU Device: {}'.format(tf.test.gpu_device_name()))\n","else:\n","    print(\"No GPU available. Switch to a GPU runtime in Google Colab.\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2334,"status":"ok","timestamp":1703085836803,"user":{"displayName":"ABIRAMI G","userId":"00751295287036755883"},"user_tz":-330},"id":"m2NGKAM6AmNh","outputId":"1553eb4d-addd-4abc-8317-4f7c214c2d65"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 595 images belonging to 2 classes.\n","Found 595 images belonging to 2 classes.\n"]}],"source":["# Define the directories for your dataset\n","train_dir = '/content/drive/MyDrive/core project1'  # Replace with the path to your training dataset\n","test_dir = '/content/drive/MyDrive/core project1'    # Replace with the path to your test dataset\n","\n","# Set parameters for data augmentation and preprocessing\n","train_data_gen = ImageDataGenerator(\n","    rescale=1./255,\n","    rotation_range=20,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    shear_range=0.2,\n","    zoom_range=0.2,\n","    horizontal_flip=True,\n","    fill_mode='nearest'\n",")\n","test_data_gen = ImageDataGenerator(rescale=1./255)\n","\n","# Create generators for loading and augmenting images\n","batch_size = 32\n","train_generator = train_data_gen.flow_from_directory(train_dir, target_size=(224, 224), batch_size=batch_size, class_mode='categorical')\n","test_generator = test_data_gen.flow_from_directory(test_dir, target_size=(224, 224), batch_size=batch_size, class_mode='categorical')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2216,"status":"ok","timestamp":1703085843824,"user":{"displayName":"ABIRAMI G","userId":"00751295287036755883"},"user_tz":-330},"id":"v1lmpySzBJoZ","outputId":"cbcd92d1-3ab7-48e4-f8a5-a1553c7ac284"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:`lr` is deprecated in Keras optimizer, please use `learning_rate` or use the legacy optimizer, e.g.,tf.keras.optimizers.legacy.Adam.\n"]}],"source":["model = Sequential()\n","\n","# Convolutional layers\n","model.add(Conv2D(96, kernel_size=(11, 11), strides=(4, 4), activation='relu', input_shape=(224, 224, 3)))\n","model.add(MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n","model.add(Conv2D(256, kernel_size=(5, 5), activation='relu'))\n","model.add(MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n","model.add(Conv2D(384, kernel_size=(3, 3), activation='relu'))\n","model.add(Conv2D(384, kernel_size=(3, 3), activation='relu'))\n","model.add(Conv2D(256, kernel_size=(3, 3), activation='relu'))\n","model.add(MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n","\n","# Fully connected layers\n","model.add(Flatten())\n","model.add(Dense(4096, activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(4096, activation='relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(2, activation='softmax'))  # Assuming two classes (healthy skin and vitiligo)\n","\n","model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.0001), metrics=['accuracy'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6LFSpG2rBmya","executionInfo":{"status":"ok","timestamp":1703090483635,"user_tz":-330,"elapsed":23722,"user":{"displayName":"ABIRAMI G","userId":"00751295287036755883"}},"outputId":"06b96940-c48a-444a-9217-a7bb4a0c4e29"},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","18/18 [==============================] - 89s 5s/step - loss: 0.6918 - accuracy: 0.5293 - val_loss: 0.6915 - val_accuracy: 0.5312\n","Epoch 2/20\n","18/18 [==============================] - 86s 5s/step - loss: 0.6912 - accuracy: 0.5329 - val_loss: 0.6898 - val_accuracy: 0.5434\n","Epoch 3/20\n","18/18 [==============================] - 103s 6s/step - loss: 0.6906 - accuracy: 0.5471 - val_loss: 0.6906 - val_accuracy: 0.5365\n","Epoch 4/20\n","18/18 [==============================] - 88s 5s/step - loss: 0.6915 - accuracy: 0.5311 - val_loss: 0.6906 - val_accuracy: 0.5365\n","Epoch 5/20\n","18/18 [==============================] - 85s 5s/step - loss: 0.6900 - accuracy: 0.5434 - val_loss: 0.6910 - val_accuracy: 0.5330\n","Epoch 6/20\n","18/18 [==============================] - 83s 4s/step - loss: 0.6931 - accuracy: 0.5329 - val_loss: 0.6902 - val_accuracy: 0.5382\n","Epoch 7/20\n","18/18 [==============================] - 83s 5s/step - loss: 0.6920 - accuracy: 0.5311 - val_loss: 0.6907 - val_accuracy: 0.5382\n","Epoch 8/20\n","18/18 [==============================] - 83s 5s/step - loss: 0.6912 - accuracy: 0.5346 - val_loss: 0.6905 - val_accuracy: 0.5365\n","Epoch 9/20\n","18/18 [==============================] - 83s 5s/step - loss: 0.6924 - accuracy: 0.5275 - val_loss: 0.6912 - val_accuracy: 0.5312\n","Epoch 10/20\n","18/18 [==============================] - 83s 5s/step - loss: 0.6907 - accuracy: 0.5364 - val_loss: 0.6912 - val_accuracy: 0.5312\n","Epoch 11/20\n","18/18 [==============================] - 102s 6s/step - loss: 0.6909 - accuracy: 0.5329 - val_loss: 0.6910 - val_accuracy: 0.5330\n","Epoch 12/20\n","18/18 [==============================] - 84s 5s/step - loss: 0.6908 - accuracy: 0.5435 - val_loss: 0.6920 - val_accuracy: 0.5278\n","Epoch 13/20\n","18/18 [==============================] - 83s 5s/step - loss: 0.6902 - accuracy: 0.5346 - val_loss: 0.6918 - val_accuracy: 0.5278\n","Epoch 14/20\n","18/18 [==============================] - 84s 5s/step - loss: 0.6918 - accuracy: 0.5329 - val_loss: 0.6905 - val_accuracy: 0.5382\n","Epoch 15/20\n","18/18 [==============================] - 87s 5s/step - loss: 0.6894 - accuracy: 0.5346 - val_loss: 0.6902 - val_accuracy: 0.5382\n","Epoch 16/20\n","18/18 [==============================] - 84s 5s/step - loss: 0.6928 - accuracy: 0.5293 - val_loss: 0.6912 - val_accuracy: 0.5312\n","Epoch 17/20\n","18/18 [==============================] - 102s 6s/step - loss: 0.6913 - accuracy: 0.5293 - val_loss: 0.6904 - val_accuracy: 0.5382\n","Epoch 18/20\n","18/18 [==============================] - 84s 5s/step - loss: 0.6895 - accuracy: 0.5417 - val_loss: 0.6914 - val_accuracy: 0.5312\n","Epoch 19/20\n","18/18 [==============================] - 84s 5s/step - loss: 0.6885 - accuracy: 0.5453 - val_loss: 0.6916 - val_accuracy: 0.5330\n","Epoch 20/20\n","18/18 [==============================] - 82s 4s/step - loss: 0.6930 - accuracy: 0.5293 - val_loss: 0.6905 - val_accuracy: 0.5365\n"]}],"source":["epochs = 20\n","history = model.fit(train_generator, steps_per_epoch=train_generator.samples // batch_size, epochs=epochs, validation_data=test_generator, validation_steps=test_generator.samples // batch_size)"]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP6qi/oREaOJSsxzQssXP4K"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}